{"body":"\r\nSORM is an object-relational mapping framework having elegance, consistency and simplicity at its primary principles. It is absolutely abstracted from relational side automagically creating database tables, emitting queries, inserting, updating and deleting records. This all functionality is presented to the user with a simple API around standard Scala's case classes. \r\n\r\n##Creating a database schema can be as easy as this:\r\n\r\n    case class Artist ( name : String, genres : Set[Genre] )\r\n    case class Genre ( names : String ) \r\n    val db \r\n      = new sorm.Instance(\r\n          entities = Set() + sorm.Entity[Artist]() + sorm.Entity[Style](),\r\n          url = \"jdbc:h2:mem:test\",\r\n          user = \"\",\r\n          password = \"\"\r\n        )\r\n\r\n##Storing values in a database doesn't have to be any harder than this:\r\n    \r\n    val cx = db.connection()\r\n\r\n    val metal = cx.save( Genre(\"Metal\") )\r\n    val rock = cx.save( Genre(\"Rock\") )\r\n    cx.save( Artist(\"Metallica\", Set() + metal + rock) )\r\n    cx.save( Artist(\"Dire Straits\", Set() + rock) )\r\n\r\n##Why should retrieving values from a database be any scarier than this?\r\n\r\n    val metallica = cx.access[Artist].whereEqual(\"name\", \"Metallica\").fetchOne()\r\n\r\n##Learn more\r\n\r\nFor a detailed info please visit the [Wiki](https://github.com/nikita-volkov/sorm/wiki) or learn the [API](http://nikita-volkov.github.com/sorm/api/) (you're really interested in the contents of a plain `sorm._` package only).\r\n\r\n##Support\r\n\r\nSupport is provided at [StackOverflow](http://stackoverflow.com/). Go ahead and ask your questions under a tag \"sorm\".\r\n\r\n##Issues\r\n\r\nPlease post any issues you come across in the [issues](https://github.com/nikita-volkov/sorm/issues) section.\r\n\r\n##Contribution\r\n    \r\nIt is a very large project, and any kind of contribution is much appreciated. So if you find anything that you think SORM could evolve on, go ahead and fork and leave your pull requests. Currently, the most wanted contributions are drivers for other DBRMs.\r\n","google":"","tagline":"A case-classes oriented ORM framework for Scala","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"SORM"}